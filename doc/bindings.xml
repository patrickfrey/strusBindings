<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bindings>
<tracking id="php">
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-63809026-11', 'auto');
  ga('send', 'pageview');
</tracking>
<class id="Term">
<description>Single term occurrence in a document.</description>

<method id="type" return="string">
<description>Get the type name ot the term.</description>
</method>

<method id="value" return="string">
<description>Get the value ot the term.</description>
</method>

<method id="position" return="int">
<description>Get the word count position ot the term.</description>
</method>

</class>
<description>Meta data table element of a document.</description>
<class id="MetaData">
<description>Meta data element of a document.</description>

<method id="name" return="string">
<description>Get the name of the document meta data element.</description>
</method>

<method id="value" return="Variant">
<description>Get the value of the document meta data element.</description>
</method>

</class>
<class id="Attribute">
<description>Attribute of a document.</description>

<method id="name" return="string">
<description>Get the name of the document attribute.</description>
</method>

<method id="value" return="string">
<description>Get the value of the document attribute.</description>
</method>

</class>
<class id="Document">
<description>Document definition</description>

<method id="addSearchIndexTerm" return="void">
<description>Add a single term occurrence to the document for retrieval (inverted index).</description>
<param name="type" type="string">
<description>term type name of the search index term</description>
</param>
<param name="value" type="string">
<description>term value of the search index term</description>
</param>
<param name="position" type="int">
<description>word count position of the search index term</description>
</param>
</method>

<method id="addForwardIndexTerm" return="void">
<description>Add a single term occurrence to the document for summarization (forward index).</description>
<param name="type" type="string">
<description>term type name of the forward index term</description>
</param>
<param name="value" type="string">
<description>term value of the forward index term</description>
</param>
<param name="position" type="int">
<description>word count position of the forward index term</description>
</param>
</method>

<method id="setMetaData" return="void">
<description>Define a meta data table element value of the document for query restrictions and summarization.</description>
<param name="name" type="string">
<description>name ot the meta data element</description>
</param>
<param name="value" type="string">
<description>value of the meta data element</description>
</param>
</method>

<method id="setAttribute" return="void">
<description>Define an attribute of the document for summarization.</description>
<param name="name" type="string">
<description>name of the document attribute</description>
</param>
<param name="value" type="string">
<description>value of the document attribute</description>
</param>
</method>

<method id="setUserAccessRight" return="void">
<description>Allow a user to access the document.</description>
<remark>This function is only implemented if ACL is enabled in the storage.</remark>
<param name="username" type="string">
<description>name of user that is allowed to access this document</description>
</param>
</method>

<method id="setDocid" return="void">
<description>Set the document identifier (docid) of the document.</description>
<param name="docid" type="string">
<description>identifier of the document</description>
</param>
</method>

<method id="searchIndexTerms" return="Term[]">
<description>Get the list of search terms of this document</description>
</method>

<method id="forwardIndexTerms" return="Term[]">
<description>Get the list of forward terms of this document</description>
</method>

<method id="metaData" return="MetaData[]">
<description>Get the list of meta data of this document</description>
</method>

<method id="attributes" return="Attribute[]">
<description>Get the list of attributes of this document</description>
</method>

<method id="users" return="string[]">
<description>Get the list of users that are allowed to access this document</description>
</method>

<method id="docid" return="string">
<description>Get the document identifier (docid) of the document</description>
</method>

</class>
<class id="DocumentAnalyzer">

<description>Analyzer object representing a program for segmenting, tokenizing and normalizing a document into its atomic parts, that can be inserted into a storage and be retrieved from there.</description>
<remark>The only way to construct a document analyzer instance is to call createDocumentAnalyzer of StrusContext.</remark>

<method id="addSearchIndexFeature" return="void">
<description>Define how a feature to insert into the inverted index (search index) is selected, tokenized and normalized.</description>

<param name="type" type="string">
<description>type type of the features produced</description>
</param>

<param name="selectexpr" type="string">
<description>expression selecting the elements to fetch for producing this feature</description>
</param>

<param name="tokenizer" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for this feature</description>
</param>

<param name="normalizers" type="StringList[]">
<description>list of normalizer function descriptions  as list of strings (first element is the function name, the following elements are the parameters) to use for this feature in the ascending order of appearance</description>
</param>

<param name="options" type="string[]">
<description>list of options as strings, one of {"BindPosPred" => the position is bound to the preceeding feature, "BindPosSucc" => the position is bound to the succeeding feature</description>
</param>
</method>

<method id="addForwardIndexFeature" return="void">
<description>Define how a feature to insert into the forward index (for summarization) is selected, tokenized and normalized.</description>

<param name="type" type="string">
<description>type type of the features produced</description>
</param>

<param name="selectexpr" type="string">
<description>expression selecting the elements to fetch for producing this feature</description>
</param>

<param name="tokenizer" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for this feature</description>
</param>

<param name="normalizers" type="StringList[]">
<description>list of normalizer function descriptions as list of strings (first element is the function name, the following elements are the parameters) to use for this feature in the ascending order of appearance</description>
</param>

<param name="options" type="string[]">
<description>list of options as strings, one of {"BindPosPred" => the position is bound to the preceeding feature, "BindPosSucc" => the position is bound to the succeeding feature</description>
</param>
</method>

<method id="defineMetaData" return="void">
<description>Define how a feature to insert as meta data is selected, tokenized and normalized.</description>

<param name="fieldname" type="string">
<description>name of the addressed meta data table element</description>
</param>

<param name="selectexpr" type="string">
<description>expression selecting the elements to fetch for producing this feature</description>
</param>

<param name="tokenizer" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for this feature</description>
</param>

<param name="normalizers" type="StringList[]">
<description>list of normalizer function descriptions as list of strings (first element is the function name, the following elements are the parameters) to use for this feature in the ascending order of appearance</description>
</param>
</method>

<method id="defineStatisticsMetaData" return="void">
<description>Declare some collected statistics of the document to be put into the meta data table used for restrictions, weighting and summarization.</description>

<param name="fieldname" type="string">
<description>name of the addressed meta data table element</description>
</param>

<param name="function" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for collecting statistics for the specified field</description>
</param>
</method>

<method id="defineAttribute" return="void">
<description>Define how a feature to insert as document attribute (summarization) is selected, tokenized and normalized.</description>

<param name="attribname" type="string">
<description>name of the addressed attribute</description>
</param>

<param name="selectexpr" type="string">
<description>expression selecting the elements to fetch for producing this feature</description>
</param>

<param name="tokenizer" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for this feature</description>
</param>

<param name="normalizers" type="StringList[]">
<description>list of normalizer function descriptions as list of strings (first element is the function name, the following elements are the parameters) to use for this feature in the ascending order of appearance</description>
</param>
</method>

<method id="analyze" return="Document">
<description>Analye the content and return the document structure.</description>

<param name="content" type="string">
<description>content string (NOT a file name !) of the document to analyze</description>
</param>
</method>

</class>
<class id="QueryAnalyzer">
<description>Analyzer object representing a set of functions for segmenting, tokenizing and normalizing a phrase into its atomic parts, that can be used for document retrieval.</description>
<remark>The only way to construct a query analyzer instance is to call createQueryAnalyzer of StrusContext.</remark>

<method id="definePhraseType" return="void">
<description>Defines a phrase type by name. Phrases can be passed together with this name to the query analyzer to get the terms for building query.</description>

<param name="phraseType" type="string">
<description>name of the phrase type defined</description>
</param>

<param name="featureType" type="string">
<description>feature type name assigned to the features created by this phrase type</description>
</param>

<param name="tokenizer" type="StringList">
<description>tokenizer function description as list of strings (first element is the function name, the following elements are the parameters) to use for this phrase type</description>
</param>

<param name="normalizers" type="StringList[]">
<description>list of normalizer function descriptions as list of strings (first element is the function name, the following elements are the parameters) to use for this phrase type in the ascending order of appearance</description>
</param>
</method>

<method id="analyzePhrase" return="Term[]">
<description>Tokenizes and normalizes a phrase and creates some typed terms out of it according the definition of the phrase type given.</description>

<param name="phraseType" type="string">
<description>name of the phrase type to select analysis method</description>
</param>

<param name="phraseContent" type="string">
<description>content string of the phrase to analyze</description>
</param>
</method>

</class>
<class id="StorageClient">
<description>Object representing a client connection to the storage .</description>
<remark>The only way to construct a storage client instance is to call the method createStorageClient of StrusContext.</remark>

<method id="nofDocumentsInserted" return="GlobalCounter">
<description>Get the global number of documents inserted into all storage nodes (of all nodes of the search index).</description>
</method>

<method id="insertDocument" return="void">
<description>Prepare the inserting a document into the storage.</description>
<remark>The document is physically inserted with the next implicit or explicit call of 'flush'</remark>

<param name="docid" type="string">
<description>the identifier of the document to insert</description>
</param>

<param name="doc" type="Document">
<description>the structure of the document to insert</description>
</param>
</method>

<method id="deleteDocument" return="void">
<description>Prepare the deletion of a document from the storage.</description>
<remark>The document is physically deleted with the next implicit or explicit call of 'flush'</remark>

<param name="docid" type="string">
<description>the identifier of the document to delete</description>
</param>
</method>

<method id="deleteUserAccessRights" return="void">
<description>Prepare the deletion of all document access rights of a user.</description>
<remark>The user access rights are changed accordingly with the next implicit or explicit call of 'flush'</remark>

<param name="username" type="string">
<description>the name of the user to delete all access rights (in the local collection)</description>
</param>
</method>

<method id="flush" return="void">
<description>Commit all insert or delete or user access right change statements open.</description>
</method>

<method id="close" return="void">
<description>Close the storage client.</description>
</method>

</class>
<class id="QueryEval">
<description>Query evaluation program object representing an information retrieval scheme for documents in a storage.</description>

<method id="addTerm" return="void">
<description>Declare a term that is used in the query evaluation as structural element without beeing part of the query (for example punctuation used for match phrases summarization).</description>

<param name="set" type="string">
<description>identifier of the term set that is used to address the terms</description>
</param>

<param name="type" type="string">
<description>feature type of the of the term</description>
</param>

<param name="value" type="string">
<description>feature value of the of the term</description>
</param>
</method>

<method id="addSelectionFeature" return="void">
<description>Declare a feature set to be used as selecting feature.</description>

<param name="set" type="string">
<description>identifier of the term set addressing the terms to use for selection</description>
</param>
</method>

<method id="addRestrictionFeature" return="void">
<description>Declare a feature set to be used as restriction.</description>

<param name="set" type="string">
<description>identifier of the term set addressing the terms to use as restriction</description>
</param>
</method>

<method id="addExclusionFeature" return="void">
<description>Declare a feature set to be used as exclusion.</description>

<param name="set" type="string">
<description>identifier of the term set addressing the terms to use as exclusion</description>
</param>
</method>

<method id="addSummarizer" return="void">
<description>Declare a summarizer.</description>

<param name="resultAttribute" type="string">
<description>name of the result attribute this summarization result is assigned to</description>
</param>

<param name="name" type="string">
<description>the name of the summarizer to add</description>
</param>

<param name="config" type="Map">
<description>a list of named configuration options of the summarizer to add.
	The values of the configuration options can be numeric or of type string. 
	Key identifiers starting with a dot '.' are declaring feature parameters.
	The names of the configuration key identifiers depend on the summarizer implementation.</description>
</param>
</method>

<method id="addWeightingFunction" return="void">
<description>Add a weighting function to use as summand of the total document weight.</description>

<param name="weight" type="float">
<description>additive weight of the document</description>
</param>

<param name="name" type="string">
<description>the name of weighting function to add</description>
</param>

<param name="config" type="Map">
<description>a list of named configuration options of the weighting function to add.
	The values of the configuration options can be numeric or of type string. 
	Key identifiers starting with a dot '.' are declaring feature parameters.
	The names of the configuration key identifiers depend on the weighting function implementation.</description>
</param>
</method>

<method id="createQuery" return="Query">
<description>Create a query builder based on this query evaluation scheme.</description>

<param name="storage" type="StorageClient">
<description>storage to execute the query on</description>
</param>
</method>

</class>
<class id="Query">
<description>Object representing an instance of a query for documents in a storage.</description>
<note>The expressions of the query are constructed as tree with a classical stack machine.</note>
<remark>The only way to construct a query instance is to call the method createQuery of QueryEval.</remark>

<method id="pushTerm" return="void">
<description>Push a single term on the stack.</description>

<param name="type" type="string">
<description>query term type name</description>
</param>

<param name="value" type="string">
<description>query term value</description>
</param>
</method>

<method id="pushExpression" return="void">
<description>Create an expression from the topmost 'argc' elements of the stack, pop them from the stack and push the expression as single unit on the stack.</description>

<param name="opname" type="string">
<description>name of the expression operator</description>
</param>

<param name="argc" type="int">
<description>number of operands (topmost elements from stack) of the expression</description>
</param>

<param name="range" type="int">
<description>span ot the expression in the document</description>
</param>
</method>

<method id="pushDuplicate" return="void">
<description>Push a duplicate of the topmost element of the query stack.</description>
<remark>This function makes it possible to reference terms or expressions more than once as features or as subexpressions.</remark>
</method>

<method id="attachVariable" return="void">
<description>Attaches a variable to the topmost expression or term on the query stack.</description>
<note>The positions of the query matches of the referenced term or expression in a document can be accessed through this variable in summarization.</note>

<param name="name" type="string">
<description>name of the variable attached</description>
</param>
</method>

<method id="defineFeature" return="void">
<description>Create a feature from the top element on the stack (and pop the element from the stack).</description>

<param name="name" type="string">
<description>name of the set that is used to address this feature</description>
</param>

<param name="weight" type="float">
<description>individual weight of this feature in the query</description>
</param>
</method>

<method id="defineMetaDataRestriction" return="void">
<description>Define a meta data restriction.</description>

<param name="compareOp" type="string">
<description>compare operator, one of "=","!=","&gt;=","&lt;=","&lt;","&gt;".</description>
</param>

<param name="name" type="string">
<description>name of the meta data field (left side of comparison operator)</description>
</param>

<param name="operand" type="Variant">
<description>numeric value to compare with the meta data field (right side of comparison operator)</description>
</param>

<param name="newGroup" type="bool">
<description>true, if the restriction is not an alternative condition to the previous one defined (alternative conditions are evaluated as logical OR)</description>
<note>The grouping with the 'newGroup' parameter helps to build expressions in conjunctive normal form. If 'newGroup' is true, then a new group of OR elements is started.</note>
</param>
</method>

<method id="setMaxNofRanks" return="void">
<description>Set maximum number of ranks to return as query result.</description>

<param name="maxNofRanks" type="int">
<description>maximum number of results to return by this query</description>
</param>
</method>

<method id="setMinRank" return="void">
<description>Set the index of the first rank to be returned by this query.</description>

<param name="minRank" type="int">
<description>index of the first rank to be returned by this query</description>
</param>
</method>

<method id="addUserName" return="void">
<description>Add a user for this query (as alternative role).</description>
<note>The user restriction applies if no user role specified in the query is allowed to see the document</note>

<param name="username" type="string">
<description>an alternative name of a user for the evaluation of this query</description>
</param>
</method>

<method id="evaluate" return="Map[]">
<description>Evaluate this query and return the result. The result is a list of 
ranked documents with attributes. Some result elements are hardcoded like "weight" and "docno". Others
are depending on the summarizer configurations.
The rest is defined by the summarizers used. </description>
</method>

</class>
<class id="StrusContext">
<description>Object holding the global context of the strus information retrieval engine.</description>
<note>There a two modes of this context object operating on a different base.
	If you create this object without parameter, then the context is local.
	In a local context you can load modules, define resources, etc. If you create
	this object with a connection string as parameter, then all object created by
	this context reside on the server (strusRpcServer) addressed with the connection string.
	In this case loaded modules and resources are ignored. What modules to use is then
	specified on server startup.</note>

<method id="loadModule" return="void">
<description>Load a module.</description>
<remark>Only implemented in local context mode with own module loader.</remark>

<param name="paths" type="string">
<description>semicolon separated list of module search paths</description>
</param>
</method>

<method id="addModulePath" return="void">
<description>Add a path from where to try to load modules from.</description>
<remark>Only implemented in local context mode with own module loader.</remark>

<param name="paths" type="string">
<description>semicolon separated list of module search paths or single path</description>
</param>
</method>

<method id="addResourcePath" return="void">
<description>Add a path from where to try to load resources from.</description>
<remark>Only implemented in local context mode with own module loader</remark>

<param name="paths" type="string">
<description>semicolon separated list of resource search paths or single path</description>
</param>
</method>

<method id="createStorageClient" return="StorageClient">
<description>Create a storage client instance.</description>

<param name="config" type="string">
<description>configuration string of the storage client or empty, if the default remote storage of the RPC server is chosen</description>
</param>
</method>

<method id="createStorage" return="void">
<description>Create a new storage (physically) described by config-</description>

<param name="config" type="string">
<description>configuration string of the new storage</description>
</param>
</method>

<method id="destroyStorage" return="void">
<description>Destroy a storage (physically) described by config.</description>
<note>Handle this function carefully</note>

<param name="config" type="string">
<description>configuration string identifying the storage to destroy</description>
</param>
</method>

<method id="createDocumentAnalyzer" return="DocumentAnalyzer">
<description>Create a document analyzer instance-</description>

<param name="segmentername" type="string">
<description>name of the segmenter to use (if empty then the default segmenter is used)</description>
</param>
</method>

<method id="createQueryAnalyzer" return="QueryAnalyzer">
<description>Create a query analyzer instance.</description>
</method>

<method id="createQueryAnalyzer" return="QueryEval">
<description>Create a query evaluation instance.</description>
</method>

</class>
</bindings>



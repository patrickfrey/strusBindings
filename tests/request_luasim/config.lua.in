require "testUtils"

serverConfig = {
	data = {
		workdir     = "@TEST_REQUEST_LUASIM_RUN_DIR@",
		configdir   = "@TEST_REQUEST_LUASIM_RUN_DIR@/config",
		resources   = "@TEST_REQUEST_LUASIM_SRC_DIR@/strus"
	},
	transactions = {
		max_idle_time  = 600,
		nof_per_sec = 60
	},
	extensions = {
		directory = "@STRUS_MODULE_PATH@",
		modules = { 
			@STRUS_MODULES_LOADED@
		}
	},
	http = {
		script = "/strus"
	},
	service = {
		worker_threads = 1,
		name = "test",
		api = "http",
		ip = "0.0.0.0",
		port = 8080,
	},
	logging = {
		level = "debug",
		directory = "{data.workdir}/logs",
		file = {
			name = "{service.name}.log",
			append = true
		}
	},
	debug = {
		log_requests = true,
		struct_depth = 5,
		request_file = "./requests.{service.name}.log",
		protocol = {
			pretty_print = true,
			quit_enabled = true
		}
	}
}

SERVER="http://127.0.0.1:7184"
CSERVER1="http://127.0.0.1:7182"
SSERVER1="http://127.0.0.1:7183"
ISERVER1="http://127.0.0.1:7184"
ISERVER2="http://127.0.0.1:7185"
ISERVER3="http://127.0.0.1:7186"
ISERVER4="http://127.0.0.1:7187"
VSERVER1="http://127.0.0.1:7191"
QSERVER1="http://127.0.0.1:7192"

create_dir( "storage")
create_dir( "config")

serverAddressMap = {}
serverSet = {}

function def_test_server( serverName, address, embeddedConfig)
	if not serverSet[ address] then
		serverSet[ address] = true
		if serverAddressMap[ serverName] then
			error( string.format("server %s defined twice", serverName))
		end
		serverAddressMap[ serverName] = address

		config = serverConfig
		config.service.name = serverName
		if embeddedConfig then
			def_server( address, mergeValues( embeddedConfig, config))
		else
			def_server( address, config)
		end
		if verbose then io.stderr:write( string.format("- Defined server %s at %s\n", serverName, address)) end
	end
end

function serverAddress( serverName)
	rt = serverAddressMap[ serverName]
	if not rt then
		error( string.format("server %s not defined", serverName))
	end
	return rt
end

function serviceAddress( serverName, type, index)
	if index then
		return serverAddress( serverName) .. "/" .. type .. "/" .. string.sub( type, 1, 1) .. index
	else
		return serverAddress( serverName) .. "/" .. type .. "/" .. "test"
	end
end


